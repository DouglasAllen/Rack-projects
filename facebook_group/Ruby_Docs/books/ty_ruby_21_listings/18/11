#!/usr/bin/env ruby

require 'gtk'; include Gtk
require 'findbox'
require 'messagebox'

class Editor < Window
  def initialize(initial_filename = nil)

    super()         
    (ag = AccelGroup.new).attach(self)

    # Create the main text window.
    set_title('Simple editor')
    set_default_size(400,400)
    add(frame = VBox.new(false))

    # Create drop-down menus using an item factory.
    items = [
      ['/F_ile', nil,
        ItemFactory::BRANCH],
      ['/F_ile/_Open', '<control>O',
        ItemFactory::ITEM, proc{do_open}],
      ['/F_ile/_Save', '<control>S', 
        ItemFactory::ITEM, proc{do_save}],
      ['/F_ile/sep1', nil, 
        ItemFactory::SEPARATOR],
      ['/F_ile/_Quit', '<control>Q',
        ItemFactory::ITEM, proc{do_exit}],
      ['/_Edit', nil,
        ItemFactory::BRANCH],
      ['/_Edit/_Search', '<control>S',
        ItemFactory::ITEM, proc{do_search}]
    ]

    factory = ItemFactory.new(ItemFactory::TYPE_MENU_BAR, '<main>', ag)
    factory.create_items(items)
    frame.pack_start(factory.get_widget('<main>'), false, false, 2)
    
    # Create the text area in a scrolled window.
    frame.add(sw = ScrolledWindow.new)
    sw.add(@textbox = Text.new)
    @textbox.set_editable true
    sw.set_policy(POLICY_NEVER,POLICY_ALWAYS)
    @textbox.set_word_wrap true

    # Load initial file, if given, and we're ready to roll.
    load_file(initial_filename) if initial_filename
    @textbox.grab_focus
    show_all
  end

  def do_exit # What enhancements could be added here?
    destroy
  end

  private
  def do_open
    fs = FileSelection.new('load file')
    fs.cancel_button.signal_connect('clicked') {fs.destroy}
    fs.ok_button.signal_connect('clicked') do
      load_file(fs.get_filename)
      fs.destroy
    end
    fs.set_modal(true)
    fs.show_all
  end
  
  def load_file(filename)
    begin
      clear_all
      @textbox.insert_text(File.open(filename,'r').read,0)
    rescue
      MessageBox.new($!,[['Cancel']])
    end
  end
  
  def do_save
    fs = FileSelection.new('save file')
    fs.cancel_button.signal_connect('clicked') {fs.destroy}
    fs.ok_button.signal_connect('clicked') do
      begin
        File.open(fs.get_filename,'w') {|f| f.write(all_text)}
        fs.destroy
      rescue
        MessageBox.new($!,[['Cancel']])
      end
    end
    fs.set_modal(true)
    fs.show_all
  end
  
  def do_search
    fb = FindBox.new
    fb.find_btn.signal_connect('clicked') do
      newpos = find_next(fb.find.get_text)
      @textbox.set_position newpos if newpos
      fb.destroy
    end
    fb.one_btn.signal_connect('clicked') do
      replace_one(fb.find.get_text, fb.replace.get_text)
      fb.destroy
    end
    fb.all_btn.signal_connect('clicked') do
      replace_all(fb.find.get_text, fb.replace.get_text)
      fb.destroy
    end
  end


  def find_next(old_text)
    all_text.index(old_text, @textbox.position+1)
  end

  def replace_all(old_text, new_text)
    while replace_one(old_text, new_text)
    end
  end

  def replace_one(old_text, new_text)
    # return value: true iff replace was successful
    if (where=find_next(old_text))
      @textbox.set_position where   # physical cursor
      @textbox.set_point where      # logical cursor
      @textbox.forward_delete(old_text.length)
      @textbox.insert_text(new_text, where)
      @textbox.set_position(where+new_text.length)
      true
    else
      false
    end
  end

  def clear_all
    @textbox.set_position 0
    @textbox.forward_delete(@textbox.get_length)
  end
  
  def all_text
    @textbox.get_chars(0,@textbox.get_length)
  end
  
end

if __FILE__ == $0
  # Create an editor and pass it a filename, if
  # the user supplied one. How could this be improved?
  w = Editor.new(ARGV[0])
  w.signal_connect('destroy') {w.do_exit}
  main
end