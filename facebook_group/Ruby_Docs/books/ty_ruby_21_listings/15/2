#
# integermatrix.rb: the IntegerMatrix class
#

class IntegerMatrix
  ##################################################
  # Initialization
  ##################################################
  def initialize(*args)
    if args.size==1
      if args[0].is_a? IntegerMatrix
        init_from_matrix(args[0])
      else
        init_from_array(args[0])
      end
    else
      init_without_data(*args)
    end
  end
  
  def init_from_matrix(m)
    @rows, @cols =  m.rows, m.cols
    @data = [];  m.each_row {|r| @data.push r.dup}
  end
  
  def init_from_array(a)
    @rows, @cols = a.size, a[0].size
    @data = []
    a.each {|r| @data.push r.dup}
  end
  
  def init_without_data(rows,cols,value=0)
    @rows, @cols = rows, cols
    @data = (0...rows).map { (0...cols).map {value} }
  end
  
  private :init_from_matrix, :init_from_array, :init_without_data

  attr_reader :rows, :cols
  
  def dimensions
    [self.rows,self.cols]
  end
  
  ##################################################
  # Core interface: get, put
  ##################################################
  def get(rowidx,colidx)
    @data[rowidx][colidx]
  end
  alias [] get

  def put(rowidx,colidx,value)
    raise TypeError "non-integer value in IntegerMatrix" unless
      value.is_a? Integer
    @data[rowidx][colidx]=value
  end
  alias []= put

  ##################################################
  # Simple iterators
  ##################################################
  def each_row
    @data.each {|row| yield row}
  end

  def each_column
    self.cols.times do |colidx|
      yield(@data.map {|row| row[colidx]})
    end
  end

  ##################################################
  # Iterators for creating new matrices
  ##################################################
  def map
    result = IntegerMatrix.new(self.rows,self.cols)
    self.rows.times do |r|
      self.cols.times do |c|
        result[r,c] = yield(self[r,c])
      end
    end
    result
  end

  def combine(other)
    raise "Dimension mismatch" if 
      other.dimensions != self.dimensions
    result = IntegerMatrix.new(self.rows,self.cols)
    self.rows.times do |r|
      self.cols.times do |c|
        result[r,c] = yield(self[r,c],other[r,c])
      end
    end
    result
  end

  ##################################################
  # Math operations
  ##################################################
  def multiplied_by(n) self.map {|x| x*n} end
  def divided_by(n)    self.map {|x| x/n} end
  def plus(x)
    if x.is_a? IntegerMatrix
      self.combine(x) {|e1,e2| e1+e2}
    else
      self.map {|e| e+x}
    end
  end
  def minus(x)
    if x.is_a? IntegerMatrix
      self.combine(x) {|e1,e2| e1-e2}
    else
      self.map {|e| e-x}
    end
  end

  alias * multiplied_by
  alias / divided_by
  alias + plus
  alias - minus
    
  ##################################################
  # Conversion to string
  ##################################################
  def to_s
    (0...self.rows).map{|r| 
      (0...self.cols).map{|c| "%5d" % self[r,c]}.join(" ")
    }.join("\n")
  end
  
  def inspect
    "%dx%d %s\n%s" %  [self.rows, self.cols, self.type, self.to_s]
  end

end
