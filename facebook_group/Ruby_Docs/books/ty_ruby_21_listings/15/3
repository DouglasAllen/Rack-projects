class Vector
  def initialize(x, y)
    @x, @y = x,y
  end
  attr_reader :x, :y
  
  def length     # from Pythagorus
    return Math::sqrt(@x*@x + @y*@y)
  end
  alias size length
  
  def to_s
    "(%.1f,%.1f)" % [@x,@y]
  end
  alias inspect to_s
  
  def plus(vec)        Vector.new(@x+vec.x, @y+vec.y)  end
  def minus(vec)       Vector.new(@x-vec.x, @y-vec.y)  end
  def multiplied_by(n) Vector.new(@x*n, @y*n)          end
  def divided_by(n)    Vector.new(@x/n, @y/n)          end
  def negated()        Vector.new(-@x, -@y)            end
  alias +  plus
  alias -  minus
  alias *  multiplied_by
  alias /  divided_by
  alias -@ negated

  def direction
    if @y>0 and @x>0 then "northeast"
    elsif @y>0 and @x<0 then "northwest"
    elsif @y>0 then "north"
    elsif @y<0 and @x>0 then "southeast"
    elsif @y<0 and @x<0 then "southwest"
    elsif @y<0 then "south"
    elsif @x>0 then "east"
    elsif @x<0 then "west"
    else "none"
    end
  end  

  # A very terse alternative to the above:
  #
  # def direction
  #   d=["south","","north"][(@y<=>0)+1]+["west","","east"][(@x<=>0)+1]
  #   (d.empty?) ? "none" : d
  # end

end
